document()
check()
document()
check()
document()
check()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
document()
check()
document()
check()
?globalVariables
document()
check()
path = '~/test/EAXD10_S344_R1_001.fastq'
q = 25, k = 2, n = 5e+05, cores = 1
if(cores != 1){requireNamespace('doParallel')}
if(cores == 0){cores <- detectCores()-1}
q = 25
k = 2
n = 5e+05
cores = 1
if(cores != 1){requireNamespace('doParallel')}
if(cores == 0){cores <- detectCores()-1}
if(cores == 1){
read_report <- data.table(file = character(), sample = character(), count = numeric(),
length = numeric(), quality_length = numeric())
for(file in path[!is.na(path)]){
srqa <- qa(file, n = n)
df <- srqa[["perCycle"]]$quality
read_counts <- sum(srqa[["readCounts"]]$read)
averages <- as.vector(by(df, df$Cycle, function(cycle){
cycle$Score[min(which(cumsum(cycle$Score) >= sum(cycle$Score)/2))]
}, simplify = TRUE))
# averages <- rowsum(df$Score * df$Count, df$Cycle)/
# rowsum(df$Count, df$Cycle)
q_length <- length(averages)
for(cycle in seq_along(averages)){
if(mean(averages[cycle:(cycle+(k))], na.rm = T) < q){
q_length <- cycle
break
}
}
read_report <- rbind(read_report, list(file, strsplit(basename(file), "_")[[1]][1], read_counts,
length(averages), q_length))
}
} else {
cl <- makeCluster(cores, type="FORK")
registerDoParallel(cl)
on.exit(stopCluster(cl))
read_report <- foreach(i = seq_along(path[!is.na(path)]), .combine = 'rbind') %dopar% {
file = path[i]
srqa <- ShortRead::qa(file, n = n)
df <- srqa[["perCycle"]]$quality
read_counts <- sum(srqa[["readCounts"]]$read)
averages <- as.vector(by(df, df$Cycle, function(cycle){
cycle$Score[min(which(cumsum(cycle$Score) >= sum(cycle$Score)/2))]
}, simplify = TRUE))
# averages <- rowsum(df$Score * df$Count, df$Cycle)/
# rowsum(df$Count, df$Cycle)
q_length <- length(averages)
for(cycle in seq_along(averages)){
if(mean(averages[cycle:(cycle+(k))], na.rm = T) < q){
q_length <- cycle
break
}
}
return(data.table(file = file, sample = strsplit(basename(file), "_L001")[[1]][1], count = read_counts, length = length(averages), quality_length = q_length))
}
}
read_report <- data.table(file = character(), sample = character(), count = numeric(),
length = numeric(), quality_length = numeric())
read_report
path
file = path
file
srqa <- qa(file, n = n)
srqa <- qa(file, n = n)
df <- srqa[["perCycle"]]$quality
read_counts <- sum(srqa[["readCounts"]]$read)
srqa
df
read_counts
averages <- as.vector(by(df, df$Cycle, function(cycle){
cycle$Score[min(which(cumsum(cycle$Score) >= sum(cycle$Score)/2))]
}, simplify = TRUE))
averages
sum(cycle$Score)
df$Cycle
df$Cycle$Score
df
averages
lengths <- as.vector(by(df, df$Cycle, function(cycle){
sum(cycle$Count)
}, simplify = TRUE))
lengths
srqa <- qa(file, n = n)
read_report <- data.table(file = character(), sample = character(), count = numeric(),
length = numeric(), quality_length = numeric())
srqa <- qa(file, n = n)
srqa <- qa(file, n = n)
srqa
df <- srqa[["perCycle"]]$quality
read_counts <- sum(srqa[["readCounts"]]$read)
read_counts
averages <- as.vector(by(df, df$Cycle, function(cycle){
cycle$Score[min(which(cumsum(cycle$Score) >= sum(cycle$Score)/2))]
}, simplify = TRUE))
lengths <- as.vector(by(df, df$Cycle, function(cycle){
sum(cycle$Count)
}, simplify = TRUE))
lengths
path = '~/test/EAXD10_S344_R1_001.fastq'
file = path
q = 25
k = 2
n = 5e+05
cores = 1
read_report <- data.table(file = character(), sample = character(), count = numeric(),
length = numeric(), quality_length = numeric())
srqa <- qa(file, n = n)
srqa <- qa(file, n = n)
n = 5e+06
srqa <- qa(file, n = n)
df <- srqa[["perCycle"]]$quality
read_counts <- sum(srqa[["readCounts"]]$read)
averages <- as.vector(by(df, df$Cycle, function(cycle){
cycle$Score[min(which(cumsum(cycle$Score) >= sum(cycle$Score)/2))]
}, simplify = TRUE))
lengths <- as.vector(by(df, df$Cycle, function(cycle){
sum(cycle$Count)
}, simplify = TRUE))
lengths
srqa <- qa(file, n = n)
srqa <- qa(file, n = n)
srqa <- qa(file, n = n)
close.connection(4)
close.connection(3)
close.connection()
close.connection(con = 1)
srqa <- qa(file, n = n)
srqa <- qa(file, n = n)
srqa <- qa(file, n = n)
df <- srqa[["perCycle"]]$quality
read_counts <- sum(srqa[["readCounts"]]$read)
averages <- as.vector(by(df, df$Cycle, function(cycle){
cycle$Score[min(which(cumsum(cycle$Score) >= sum(cycle$Score)/2))]
}, simplify = TRUE))
lengths <- as.vector(by(df, df$Cycle, function(cycle){
sum(cycle$Count)
}, simplify = TRUE))
lengths
read_counts
which(lengths/read_counts < read_counts*.99999999999)
lengths/read_counts
which(lengths/read_counts < .99999999999)
averages
read_counts <- sum(srqa[["readCounts"]]$read)
lengths <- as.vector(by(df, df$Cycle, function(cycle){
sum(cycle$Count)
}, simplify = TRUE))
as.vector(by(df, df$Cycle, function(cycle){
cycle$Score[min(which(cumsum(cycle$Score) >= sum(cycle$Score)/2))]
}, simplify = TRUE))[which(lengths/read_counts > .15)]
as.vector(by(df, df$Cycle, function(cycle){
cycle$Score[min(which(cumsum(cycle$Score) >= sum(cycle$Score)/2))]
}, simplify = TRUE))[which(lengths/read_counts > .9999999)]
averages <- as.vector(by(df, df$Cycle, function(cycle){
cycle$Score[min(which(cumsum(cycle$Score) >= sum(cycle$Score)/2))]
}, simplify = TRUE))[which(lengths/read_counts > .10)]
# averages <- rowsum(df$Score * df$Count, df$Cycle)/
# rowsum(df$Count, df$Cycle)
q_length <- length(averages)
q_length
seq_along(averages)
averages
for(cycle in seq_along(averages)){
if(mean(averages[cycle+1:(cycle+(k-1))], na.rm = T) < q){
q_length <- cycle
break
}
}
averages
k-1
cycle
averages[cycle+1:(cycle+(k-1))]
averages[2+1:(2+(k-1))]
cycle = 10
k = 3
averages[cycle+1:(cycle+(k-1))]
averages[cycle+1:(cycle+(k-1))]
cycle+1:(cycle+(k-1))
k-1
(cycle+(k-1))
cycle+1
cycle+1:cycle+(k-1)
cycle+(k-1)
11:12
(cycle+1):(cycle+(k-1))
averages[(cycle+1):(cycle+(k-1))]
for(cycle in seq_along(averages)){
if(mean(averages[(cycle+1):(cycle+(k-1))], na.rm = T) < q){
q_length <- cycle
break
}
}
cycle
(cycle+1):(cycle+(k-1))
averages[(cycle+1):(cycle+(k-1))]
mean(averages[(cycle+1):(cycle+(k-1))], na.rm = T)
mean(averages[(cycle+1):(cycle+(k-1))], na.rm = T) < q
seq_along(averages)
seq_along(averages)-1
for(cycle in seq_along(averages)-1){
if(mean(averages[(cycle+1):(cycle+(k-1))], na.rm = T) < q){
q_length <- cycle
break
}
}
cycle
q_length
mean(averages[(cycle+1):(cycle+(k-1))], na.rm = T)
averages[(cycle+1):(cycle+(k-1))]
k
(cycle+1):(cycle+(k-1))
cycle
check()
check()
